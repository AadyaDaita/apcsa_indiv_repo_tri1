<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://aadyadaita.github.io/apcsa_indiv_repo_tri1/feed.xml" rel="self" type="application/atom+xml" /><link href="https://aadyadaita.github.io/apcsa_indiv_repo_tri1/" rel="alternate" type="text/html" /><updated>2023-03-19T22:32:24-05:00</updated><id>https://aadyadaita.github.io/apcsa_indiv_repo_tri1/feed.xml</id><title type="html">Aadyaâ€™s CSA Fastpage</title><subtitle>Hey this is Aadya's fastpage</subtitle><entry><title type="html">All Vocab</title><link href="https://aadyadaita.github.io/apcsa_indiv_repo_tri1/2023/03/19/all-vocab.html" rel="alternate" type="text/html" title="All Vocab" /><published>2023-03-19T00:00:00-05:00</published><updated>2023-03-19T00:00:00-05:00</updated><id>https://aadyadaita.github.io/apcsa_indiv_repo_tri1/2023/03/19/all-vocab</id><author><name></name></author><summary type="html"><![CDATA[Casting and Ranging of Variables]]></summary></entry><entry><title type="html">Week2</title><link href="https://aadyadaita.github.io/apcsa_indiv_repo_tri1/2023/03/19/Week2.ipynb" rel="alternate" type="text/html" title="Week2" /><published>2023-03-19T00:00:00-05:00</published><updated>2023-03-19T00:00:00-05:00</updated><id>https://aadyadaita.github.io/apcsa_indiv_repo_tri1/2023/03/19/Week2</id><author><name></name></author><summary type="html"><![CDATA[{ "cells": [ { "cell_type": "code", "execution_count": 1, "metadata": { "vscode": { "languageId": "java" } }, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "Empty Queue\n", "John\n", "Jane\n", "Bob\n", "Iterate over Array\n", "John\n", "Jane\n", "Bob\n" ] } ], "source": [ "Queue queue = new LinkedList(); // Queue interface uses LL implementation\n", "queue.add(\"John\");\n", "queue.add(\"Jane\");\n", "queue.add(\"Bob\");\n", "// Collections has a toArray convertion\n", "Object[] arr = queue.toArray();\n", "\n", "// Empty queue\n", "System.out.println(\"Empty Queue\");\n", "while (queue.size() > 0) // Interate while size\n", " System.out.println(queue.remove());\n", "\n", "// Iterate of array\n", "System.out.println(\"Iterate over Array\");\n", "for (Object a : arr) // Type is Object from convertion\n", " System.out.println(a);" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# Classes and Objects CB " ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "Class have the following\n", " Contructors: define the variables in the class. \n", " Accessors: are getters. They can access a contructor of a class. \n", " Mutator methods: are setters. they can set values for a contructor of a class. \n", "\n", "\n", "Follow the format: object.method()\n", " These methods can be void methods or methods that return something. \n", " If the method takes a parameter, put the parameter in method\n", "\n", "\n", "**Static Methods**\n", "These methods are inside a class, and you do not need to create objects of the class to use the methods. \n", " You can simply access the method through the class. \n", "Math Class in an example \n", " you can just say System.out.print(Math.sqrt(16)).\n", " you dont have to create a math object \n", "\n", "\n", "**String Class**\n", "\n", "You can create string objects by just assigning string literals\n", " String word = \"theater\";\n", "Usually we don't have static methods for the String class.\n", "\n", "We can pass an integer as a double, but we can't pass a double to an integer. \n", "\n", "\n", "\n", "# Combined Table Class" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "java" } }, "outputs": [], "source": [ "public class Book{\n", " private String title;\n", " private String genre;\n", " private int pages;\n", "}" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "java" } }, "outputs": [], "source": [ "public class CombinedTable {\n", " SingleTable st1 = new SingleTable();\n", " SingleTable st2 = new SingleTable();\n", " int seatnum1 = st1.getNumSeats();\n", " int seatnum2 = st2.getNumSeats();\n", "\n", " int height1 = st1.getHeight();\n", " int height2 = st2.getHeight();\n", "\n", " double quality1 = st1.getViewQuality();\n", " double quality2 = st2.getViewQuality();\n", "\n", " public boolean combinedNumSeats(n){\n", " if ((num1 + num2 - 2)>=n){\n", " return true;\n", " }\n", "\n", " return false;\n", " }\n", "\n", " public double desireabilty(){\n", " double desireability = 0;\n", " if (height1 == height2){\n", " desireability = (quality1 + quality2)/2;\n", " }\n", " else{\n", " double temp = (quality1 + quality2)/2;\n", " desireability = temp - 10;\n", " }\n", " return desireability;\n", "\n", " }\n", "\n", "}" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# 2017 FRQ" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "java" } }, "outputs": [], "source": [ "// Question 1\n", "\n", "public Digits (int num){\n", " int number = num;\n", " int count = 0;\n", " while (number>0){\n", " int remain = number%10;\n", " digitList.add(count, remain);\n", " number = number/10;\n", " count = count +1;\n", " }\n", "\n", "}\n", "\n", "\n", "public boolean isStrictlyIncreasing(){\n", " for (int i=0; idigitList.get(i+1)){\n", " return false;\n", " }\n", "\n", " }\n", " return true;\n", "}\n", "\n" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "java" } }, "outputs": [], "source": [ "// Question 2\n", "\n", "public class MultPractice implements StudyPractice{\n", "\n", " private int first;\n", " private int second;\n", "\n", " public MultPractice(int first, int second){\n", " first = first;\n", " second = second;\n", " }\n", "\n", " //if you add two integers before you introduce a string, then you will actually add the two numbers.\n", " // if you add two numbers after you introduce a string, the two numbers will only be next to each other. \n", " public String getProblem(){\n", " String problem = first + \" TIMES \" + second\n", " return problem\n", " }\n", "\n", " public void nextProblem(){\n", " second = second + 1;\n", " // this.getProblem(); YOU DONT NEED THS LINE because in the example code, they are manually calling getProblem() again. \n", " }\n", "}" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "java" } }, "outputs": [], "source": [ "// Question 3\n", "\n", "public void replaceNthOccurance(String str, int n, String repl){\n", " int index_n = this.findnthOccurance(str, n);\n", " if (index_n queue = new LinkedList();\n", "\n", " // Adding elements to the queue\n", " queue.add(\"seven\");\n", " System.out.println(\"Enqueued data: \" + \"seven\");\n", " printQueue(queue);\n", "\n", " queue.add(\"slimy\");\n", " System.out.println(\"Enqueued data: \" + \"slimy\");\n", " printQueue(queue);\n", "\n", " queue.add(\"snakes\");\n", " System.out.println(\"Enqueued data: \" + \"snakes\");\n", " printQueue(queue);\n", "\n", " queue.add(\"sallying\");\n", " System.out.println(\"Enqueued data: \" + \"sallying\");\n", " printQueue(queue);\n", "\n", " queue.add(\"slowly\");\n", " System.out.println(\"Enqueued data: \" + \"slowly\");\n", " printQueue(queue);\n", "\n", " queue.add(\"slithered\");\n", " System.out.println(\"Enqueued data: \" + \"slithered\");\n", " printQueue(queue);\n", "\n", " queue.add(\"southward\");\n", " System.out.println(\"Enqueued data: \" + \"southward\");\n", " printQueue(queue);\n", "\n", " // Removing elements from the queue\n", " String data =queue.remove();\n", "\n", " System.out.println(\"Dequeued data: \" + data);\n", " printQueue(queue);\n", "\n", " data = queue.remove();\n", " System.out.println(\"Dequeued data: \" + data);\n", " printQueue(queue);\n", "\n", " data = queue.remove();\n", " System.out.println(\"Dequeued data: \" + data);\n", " printQueue(queue);\n", "\n", " data = queue.remove();\n", " System.out.println(\"Dequeued data: \" + data);\n", " printQueue(queue);\n", "\n", " data = queue.remove();\n", " System.out.println(\"Dequeued data: \" + data);\n", " printQueue(queue);\n", "\n", " data = queue.remove();\n", " System.out.println(\"Dequeued data: \" + data);\n", " printQueue(queue);\n", "\n", " data = queue.remove();\n", " System.out.println(\"Dequeued data: \" + data);\n", " printQueue(queue);\n", " }\n", "\n", " // Helper method to print the contents of the queue\n", " public static void printQueue(Queue queue) {\n", " System.out.println(\"Words count: \" + queue.size() + \", data: \" + String.join(\" \", queue));\n", " System.out.println();\n", " }\n", "}\n", "\n", "QueueExample.main(null);" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "java" } }, "outputs": [], "source": [ "// implementation of 1 and 5\n", "public static class Queue{\n", "\n", " private static class Node{\n", " private int data;\n", " private Node next;\n", " private Node(int data){\n", " this.data = data;\n", " }\n", " }\n", "\n", " private Node head;\n", " private Node tail;\n", " \n", " public boolean isEmpty(){\n", " return head == true;\n", " }\n", "\n", " public int peek(){\n", " return head.data\n", " }\n", "\n", " public void add(int data){\n", " //add to the tail\n", " Node node = new Note(data);\n", " if (tail != null){\n", " tail.next = node;\n", " }\n", " tail = node;\n", " if (head ==null){\n", " head = node;\n", " } \n", " }\n", "\n", " public int remove(){\n", " int data = head.data;\n", " head = head.next;\n", " if (head ==null){\n", " tail = null;\n", " }\n", " return data;\n", " }\n", "\n", "\n", "}" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "java" } }, "outputs": [], "source": [ "//2 \n", "\n", "public class Merge{\n", " public ListNode mergeTwoLists(listNode l1, listNode l2){\n", " ListNode temp_node = new ListNode(0);\n", " ListNode current_node = temp_node;\n", " while(l1!=null && l2 !== null){\n", " if (l1.val queue = new ArrayDeque();\n", " queue.add(10);\n", " queue.add(20);\n", " queue.add(30);\n", " System.out.println(queue);\n", "\n", " Stack stack = new Stack();\n", " while(!queue.isEmpty()){\n", " stack.push(queue.remove());\n", " }\n", "\n", " while(!stack.isEmpty()){\n", " queue.add(stack.pop());\n", " }\n", " System.out.print(queue);\n", "}\n", "}\n", "\n", "reverse.main(null);\n" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# Enhanced For Loops or For Each loops" ] }, { "cell_type": "code", "execution_count": 8, "metadata": { "vscode": { "languageId": "java" } }, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \n", "20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 \n", "40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \n", "60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 \n", "80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 \n", "100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 \n", "120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 \n", "140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 \n", "160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 \n", "180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 \n" ] } ], "source": [ "public class Enhanced{\n", " public static void main(String[] args){\n", " int[][] numbers = new int[10][20];\n", " int x = 0;\n", " for (int[] rows: numbers){\n", " for(int column: rows){\n", " column = column + x;\n", " x++;\n", " System.out.print(column +\" \");\n", " }\n", " System.out.println();\n", " }\n", " }\n", "}\n", "\n", "Enhanced.main(null);" ] } ], "metadata": { "kernelspec": { "display_name": "Java", "language": "java", "name": "java" }, "language_info": { "codemirror_mode": "java", "file_extension": ".jshell", "mimetype": "text/x-java-source", "name": "Java", "pygments_lexer": "java", "version": "11.0.16+8-post-Ubuntu-0ubuntu120.04" }, "orig_nbformat": 4 }, "nbformat": 4, "nbformat_minor": 2 }]]></summary></entry><entry><title type="html">Unit 1 Code.org Vocab</title><link href="https://aadyadaita.github.io/apcsa_indiv_repo_tri1/2023/03/19/Unit-1-Code.org-Vocab.html" rel="alternate" type="text/html" title="Unit 1 Code.org Vocab" /><published>2023-03-19T00:00:00-05:00</published><updated>2023-03-19T00:00:00-05:00</updated><id>https://aadyadaita.github.io/apcsa_indiv_repo_tri1/2023/03/19/Unit-1-Code.org-Vocab</id><author><name></name></author><summary type="html"><![CDATA[Object Oriented Programming Basic Vocab]]></summary></entry><entry><title type="html">College Board MC Reflection Quiz 4</title><link href="https://aadyadaita.github.io/apcsa_indiv_repo_tri1/markdown/2023/03/12/CBQuizCorrections.html" rel="alternate" type="text/html" title="College Board MC Reflection Quiz 4" /><published>2023-03-12T00:00:00-06:00</published><updated>2023-03-12T00:00:00-06:00</updated><id>https://aadyadaita.github.io/apcsa_indiv_repo_tri1/markdown/2023/03/12/CBQuizCorrections</id><author><name></name></author><category term="markdown" /><summary type="html"><![CDATA[33/39]]></summary></entry><entry><title type="html">Code</title><link href="https://aadyadaita.github.io/apcsa_indiv_repo_tri1/2023/03/09/code.ipynb" rel="alternate" type="text/html" title="Code" /><published>2023-03-09T00:00:00-06:00</published><updated>2023-03-09T00:00:00-06:00</updated><id>https://aadyadaita.github.io/apcsa_indiv_repo_tri1/2023/03/09/code</id><author><name></name></author><summary type="html"><![CDATA[{ "cells": [ { "cell_type": "markdown", "metadata": {}, "source": [ "# Small Code Excercises" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "- Write a Jupyter notebook code example on the following primitive types with a code example (4 to 5 lines), preference would be using array and methods like substring and random as applicable: int, double, boolean, char.\n", "- Now convert each of the examples to corresponding Wrapper classes, using arrays.\n", "- Expression of these in Class or PBL forms is an option. But the review must be easy for me to see work." ] }, { "cell_type": "code", "execution_count": 10, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "5\n", "true\n", "3.5\n" ] } ], "source": [ "class Main {\n", " public static void main(String[] args) {\n", " int integer = 5;\n", " boolean boo = true;\n", " double fl = 3.5;\n", "\n", " Integer num = Integer.valueOf(integer);\n", " Double db = Double.valueOf(fl);\n", " Boolean bn = Boolean.valueOf(boo);\n", "\n", " System.out.println(num);\n", " System.out.println(bn);\n", " System.out.println(db);\n", " }\n", "}\n", "\n", "Main.main(null);" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# Method and Control Structure Notes" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "## 2018 FRQ" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": [ "\n", "public boolean simulate()\n", "{\n", " int frogPosition = 0;\n", " int hopsRemaining = maxHops;\n", "\n", " while(frogPosition = 0 &&\n", " hopsRemaining > 0)\n", " {\n", " frogPosition += hopDistance();\n", " hopsRemaining--;\n", " }\n", "\n", " return frogPosition >= goalDistance;" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": [ "ublic double runSimulations(int num)\n", "{\n", " int successfulRuns = 0;\n", "\n", " for(int run = 1; run i.value) {\n", " int tmp = this.value;\n", " this.value = i.value;\n", " i.value = tmp;\n", " }\n", " }\n", "\n", " public static void swapper(int n0, int n1) {\n", " IntByReference a = new IntByReference(n0);\n", " IntByReference b = new IntByReference(n1);\n", " System.out.println(\"Before: \" + a + \" \" + b);\n", " a.swapToLowHighOrder(b); // conditionally build swap method to change values of a, b\n", " System.out.println(\"After: \" + a + \" \" + b);\n", " System.out.println();\n", " }\n", "\n", " public static void main(String[] ags) {\n", " IntByReference.swapper(21, 16);\n", " IntByReference.swapper(16, 21);\n", " IntByReference.swapper(16, -1);\n", " }\n", "\n", "}\n", "\n", "IntByReference.main(null);" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "- The code swaps two numbers to make sure that they are in the correct order. \n", " - swapToLowHighOrder is the method that does the actual swap\n", "- swapper first gets the two numbers, prints them in the old order\n", "- It then calls the swapToLowHighOrder method.\n", "- Main has several test cases. " ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# Math.Random\n", "\n", "- Now to get random integer numbers from a given fixed range, we take a min and max variable to define the range for our random numbers, both min and max are inclusive in the range.\n", "- Since Math.random() obviously returns double, we can cast it into an int\n", "- If you multiply Math.random by number N, then you will get a random number from 0 until N\n", "- If you add a number to the Math.random, then that will be the minimum starting number\n", "- Review AP exam questions with this. \n" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": [ "class Gfg2 {\n", " \n", " // driver code\n", " public static void main(String args[])\n", " {\n", " // define the range\n", " int max = 10;\n", " int min = 1;\n", " int range = max - min + 1;\n", " \n", " // generate random numbers within 1 to 10\n", " for (int i = 0; i < 10; i++) {\n", " int rand = (int)(Math.random() * range) + min;\n", " \n", " // Output is different everytime this code is executed\n", " System.out.println(rand);\n", " }\n", " }\n", "}" ] } ], "metadata": { "kernelspec": { "display_name": "Java", "language": "java", "name": "java" }, "language_info": { "codemirror_mode": "java", "file_extension": ".jshell", "mimetype": "text/x-java-source", "name": "java", "pygments_lexer": "java", "version": "11.0.16+8-post-Ubuntu-0ubuntu120.04" }, "orig_nbformat": 4 }, "nbformat": 4, "nbformat_minor": 2 }]]></summary></entry></feed>