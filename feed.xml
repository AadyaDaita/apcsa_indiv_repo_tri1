<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://aadyadaita.github.io/apcsa_indiv_repo_tri1/feed.xml" rel="self" type="application/atom+xml" /><link href="https://aadyadaita.github.io/apcsa_indiv_repo_tri1/" rel="alternate" type="text/html" /><updated>2023-03-13T01:54:37-05:00</updated><id>https://aadyadaita.github.io/apcsa_indiv_repo_tri1/feed.xml</id><title type="html">Aadyaâ€™s CSA Fastpage</title><subtitle>Hey this is Aadya's fastpage</subtitle><entry><title type="html">All Vocab</title><link href="https://aadyadaita.github.io/apcsa_indiv_repo_tri1/2023/03/12/all-vocab.html" rel="alternate" type="text/html" title="All Vocab" /><published>2023-03-12T00:00:00-06:00</published><updated>2023-03-12T00:00:00-06:00</updated><id>https://aadyadaita.github.io/apcsa_indiv_repo_tri1/2023/03/12/all-vocab</id><author><name></name></author><summary type="html"><![CDATA[Casting and Ranging of Variables]]></summary></entry><entry><title type="html">Unit 1 Code.org Vocab</title><link href="https://aadyadaita.github.io/apcsa_indiv_repo_tri1/2023/03/12/Unit-1-Code.org-Vocab.html" rel="alternate" type="text/html" title="Unit 1 Code.org Vocab" /><published>2023-03-12T00:00:00-06:00</published><updated>2023-03-12T00:00:00-06:00</updated><id>https://aadyadaita.github.io/apcsa_indiv_repo_tri1/2023/03/12/Unit-1-Code.org-Vocab</id><author><name></name></author><summary type="html"><![CDATA[Object Oriented Programming Basic Vocab]]></summary></entry><entry><title type="html">College Board MC Reflection Quiz 4</title><link href="https://aadyadaita.github.io/apcsa_indiv_repo_tri1/markdown/2023/03/12/CBQuizCorrections.html" rel="alternate" type="text/html" title="College Board MC Reflection Quiz 4" /><published>2023-03-12T00:00:00-06:00</published><updated>2023-03-12T00:00:00-06:00</updated><id>https://aadyadaita.github.io/apcsa_indiv_repo_tri1/markdown/2023/03/12/CBQuizCorrections</id><author><name></name></author><category term="markdown" /><summary type="html"><![CDATA[33/39]]></summary></entry><entry><title type="html">Code</title><link href="https://aadyadaita.github.io/apcsa_indiv_repo_tri1/2023/03/09/code.ipynb" rel="alternate" type="text/html" title="Code" /><published>2023-03-09T00:00:00-06:00</published><updated>2023-03-09T00:00:00-06:00</updated><id>https://aadyadaita.github.io/apcsa_indiv_repo_tri1/2023/03/09/code</id><author><name></name></author><summary type="html"><![CDATA[{ "cells": [ { "cell_type": "markdown", "metadata": {}, "source": [ "# Small Code Excercises" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "- Write a Jupyter notebook code example on the following primitive types with a code example (4 to 5 lines), preference would be using array and methods like substring and random as applicable: int, double, boolean, char.\n", "- Now convert each of the examples to corresponding Wrapper classes, using arrays.\n", "- Expression of these in Class or PBL forms is an option. But the review must be easy for me to see work." ] }, { "cell_type": "code", "execution_count": 10, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "5\n", "true\n", "3.5\n" ] } ], "source": [ "class Main {\n", " public static void main(String[] args) {\n", " int integer = 5;\n", " boolean boo = true;\n", " double fl = 3.5;\n", "\n", " Integer num = Integer.valueOf(integer);\n", " Double db = Double.valueOf(fl);\n", " Boolean bn = Boolean.valueOf(boo);\n", "\n", " System.out.println(num);\n", " System.out.println(bn);\n", " System.out.println(db);\n", " }\n", "}\n", "\n", "Main.main(null);" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# Method and Control Structure Notes" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "## 2018 FRQ" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": [ "\n", "public boolean simulate()\n", "{\n", " int frogPosition = 0;\n", " int hopsRemaining = maxHops;\n", "\n", " while(frogPosition = 0 &&\n", " hopsRemaining > 0)\n", " {\n", " frogPosition += hopDistance();\n", " hopsRemaining--;\n", " }\n", "\n", " return frogPosition >= goalDistance;" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": [ "ublic double runSimulations(int num)\n", "{\n", " int successfulRuns = 0;\n", "\n", " for(int run = 1; run i.value) {\n", " int tmp = this.value;\n", " this.value = i.value;\n", " i.value = tmp;\n", " }\n", " }\n", "\n", " public static void swapper(int n0, int n1) {\n", " IntByReference a = new IntByReference(n0);\n", " IntByReference b = new IntByReference(n1);\n", " System.out.println(\"Before: \" + a + \" \" + b);\n", " a.swapToLowHighOrder(b); // conditionally build swap method to change values of a, b\n", " System.out.println(\"After: \" + a + \" \" + b);\n", " System.out.println();\n", " }\n", "\n", " public static void main(String[] ags) {\n", " IntByReference.swapper(21, 16);\n", " IntByReference.swapper(16, 21);\n", " IntByReference.swapper(16, -1);\n", " }\n", "\n", "}\n", "\n", "IntByReference.main(null);" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "- The code swaps two numbers to make sure that they are in the correct order. \n", " - swapToLowHighOrder is the method that does the actual swap\n", "- swapper first gets the two numbers, prints them in the old order\n", "- It then calls the swapToLowHighOrder method.\n", "- Main has several test cases. " ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# Math.Random\n", "\n", "- Now to get random integer numbers from a given fixed range, we take a min and max variable to define the range for our random numbers, both min and max are inclusive in the range.\n", "- Since Math.random() obviously returns double, we can cast it into an int\n", "- If you multiply Math.random by number N, then you will get a random number from 0 until N\n", "- If you add a number to the Math.random, then that will be the minimum starting number\n", "- Review AP exam questions with this. \n" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": [ "class Gfg2 {\n", " \n", " // driver code\n", " public static void main(String args[])\n", " {\n", " // define the range\n", " int max = 10;\n", " int min = 1;\n", " int range = max - min + 1;\n", " \n", " // generate random numbers within 1 to 10\n", " for (int i = 0; i < 10; i++) {\n", " int rand = (int)(Math.random() * range) + min;\n", " \n", " // Output is different everytime this code is executed\n", " System.out.println(rand);\n", " }\n", " }\n", "}" ] } ], "metadata": { "kernelspec": { "display_name": "Java", "language": "java", "name": "java" }, "language_info": { "codemirror_mode": "java", "file_extension": ".jshell", "mimetype": "text/x-java-source", "name": "java", "pygments_lexer": "java", "version": "11.0.16+8-post-Ubuntu-0ubuntu120.04" }, "orig_nbformat": 4 }, "nbformat": 4, "nbformat_minor": 2 }]]></summary></entry><entry><title type="html">Binary code</title><link href="https://aadyadaita.github.io/apcsa_indiv_repo_tri1/2023/03/07/Binary-Code.ipynb" rel="alternate" type="text/html" title="Binary code" /><published>2023-03-07T00:00:00-06:00</published><updated>2023-03-07T00:00:00-06:00</updated><id>https://aadyadaita.github.io/apcsa_indiv_repo_tri1/2023/03/07/Binary%20Code</id><author><name></name></author><summary type="html"><![CDATA[{ "cells": [ { "cell_type": "markdown", "metadata": {}, "source": [ "# Java Code" ] }, { "cell_type": "code", "execution_count": 2, "metadata": { "vscode": { "languageId": "java" } }, "outputs": [], "source": [ "import java.util.Scanner;\n", "\n", "/*\n", " * Java Program to add two binary numbers.\n", " * You can either write your own method or you \n", " * can use Java API for doing binary addition.\n", " * \n", " * input: 1010 + 101\n", " * output = 1111\n", " */\n", "\n", "public class Main {\n", "\n", " public static void main(String[] args) {\n", "\n", " System.out.println(\"Welcome to Java program to add two binary numbers\");\n", " Scanner scnr = new Scanner(System.in);\n", "\n", " System.out.println(\"Please enter first binary number\");\n", " String first = scnr.nextLine();\n", "\n", " System.out.println(\"Please enter second binary number\");\n", " String second = scnr.nextLine();\n", "\n", " String addition = add(first, second);\n", " System.out.println(\"addition of two binary number is : \" + addition);\n", "\n", " String sum = sum(first, second);\n", " System.out.println(\"Sum of two binary number is : \" + sum);\n", "\n", " scnr.close();\n", "\n", " }\n", "\n", " /**\n", " * Java method to calculate sum of two binary numbers this method calculate\n", " * sum by first converting binary String to binary numbers and then adding\n", " * them using binary arithmetic.\n", " * \n", " * @param first\n", " * @param second\n", " * @return sum of two given binary numbers\n", " */\n", " public static String add(String first, String second) {\n", " int b1 = Integer.parseInt(first, 2);\n", " int b2 = Integer.parseInt(second, 2);\n", " int sum = b1 + b2;\n", " return Integer.toBinaryString(sum);\n", " }\n", "\n", " /**\n", " * Java method to add two binary numbers. This method doesn't use Java API,\n", " * instead develop it's own logic to perform binary addition.\n", " * \n", " * @param bin1\n", " * @param bin2\n", " * @return addition of two binary numbers\n", " */\n", " public static String sum(String b1, String b2) {\n", " int len1 = b1.length();\n", " int len2 = b2.length();\n", " int carry = 0;\n", " String res = \"\";\n", " // the final length of the result depends on the bigger length between b1\n", " // and b,\n", " // (also the value of carry, if carry = 1, add \"1\" at the head of result,\n", " // otherwise)\n", " int maxLen = Math.max(len1, len2);\n", " for (int i = 0; i < maxLen; i++) {\n", "\n", " // start from last char of String b1 and b2\n", " // notice that left side is an int and right side is char\n", " // so we need to minus the decimal value of '0'\n", " int p = i < len1 ? b1.charAt(len1 - 1 - i) - '0' : 0;\n", " int q = i < len2 ? b2.charAt(len2 - 1 - i) - '0' : 0;\n", " int tmp = p + q + carry;\n", " carry = tmp / 2;\n", " res = tmp % 2 + res;\n", " }\n", " return (carry == 0) ? res : \"1\" + res;\n", " }\n", "\n", "}\n" ] } ], "metadata": { "kernelspec": { "display_name": "Java", "language": "java", "name": "java" }, "language_info": { "codemirror_mode": "java", "file_extension": ".jshell", "mimetype": "text/x-java-source", "name": "Java", "pygments_lexer": "java", "version": "11.0.16+8-post-Ubuntu-0ubuntu120.04" }, "orig_nbformat": 4 }, "nbformat": 4, "nbformat_minor": 2 }]]></summary></entry></feed>